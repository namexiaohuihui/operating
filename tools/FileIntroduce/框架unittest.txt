https://www.cnblogs.com/imyalost/p/9048386.html

unittest:
1.成功是 .，失败是 F，出错是 E，跳过是 S。
2.每个测试方法均以 test 开头，否则是不被unittest识别的。
3.#setUp用来为测试准备环境，tearDown用来清理环境.每执行一次函数就会调用它们,需配合@classmethod装饰器
    #setUpClass() 与 tearDownClass():从头到尾只调用一次
4.跳过某个case
skip装饰器一共有三个 unittest.skip(reason)、
unittest.skipIf(condition, reason)、unittest.skipUnless(condition,
 reason)，skip无条件跳过，skipIf当condition为True时跳过，
 skipUnless当condition为False时跳过。
 也可以在函数中假如self.skipTest('Do not run this.')效果和装饰器一样

 5.使用testcase来执行函数
  # 用addTests + TestLoader
    # loadTestsFromName()，传入'模块名.TestCase名'
    #suite.addTests(unittest.TestLoader().loadTestsFromName('test_mathfunc.TestMathFunc'))
    #suite.addTests(
    #    unittest.TestLoader().loadTestsFromNames(['test_mathfunc.TestMathFunc']))  # loadTestsFromNames()，类似，传入列表
    # loadTestsFromTestCase()，传入TestCase
    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMathFunc))

6.在Python2.2以后可以使用@classmethod装饰器来创建类方法.


7.unittest运行方式：https://docs.python.org/3/library/unittest.html
    7.1 unittest.main(version=2)
    7.2 python -m unittest test_module1 test_module2
    7.3 python -m unittest test_module.TestClass
    7.4 python -m unittest test_module.TestClass.test_method
    7.5 python -m unittest tests/test_something.py
    7.6
        runner = unittest.TextTestRunner()
        suite = unittest.TestSuite()
        suite.addTest(WidgetTestCase('test_default_widget_size'))
        suite.addTest(WidgetTestCase('test_widget_resize'))
        runner.run(suite)
    7.7
        suite = unittest.TestSuite()
        loader = TestLoader()
        loader.testMethodPrefix = 'ab'
        test_cases1 = unittest.TestLoader().loadTestsFromTestCase(TestPlatformTabs)
        suite.addTests(test_cases1)
        runner = unittest.TextTestRunner(verbosity=2)
        runner.run(suite)